// product_service.dart

import 'package:appwrite/appwrite.dart';
import 'package:flutter/foundation.dart';
import 'appwrite_service.dart';
import 'store_model.dart'; // ุชุฃูุฏ ูู ูุฌูุฏ ููู store_model.dart
import 'product_cache_service.dart'; // ๐ก ุฅุถุงูุฉ ุฎุฏูุฉ ุงูุชุฎุฒูู ุงููุคูุช

class ProductService {
  final Databases _databases;
  final ProductCacheService _cacheService; // ๐ก ุฅุถุงูุฉ ุฎุฏูุฉ ุงููุงุด

  ProductService(this._databases)
    : _cacheService = ProductCacheService(); // ๐ก ุชููุฆุฉ ุงููุงุด

  // ๐ ุฏุงูุฉ ููุญุฏุฉ ูุฌูุจ ุงูููุชุฌุงุช ุจูุงุกู ุนูู ูุนุฑู ุงููุชุฌุฑ ูุงูุชุตููู ุงูุงุฎุชูุงุฑู
  // ๐ก ุฅุถุงูุฉ ุฎูุงุฑ ุงุณุชุฎุฏุงู ุงููุงุด
  Future<List<Product>> getProducts({
    required String storeId,
    String? categoryId,
    int limit = 100, // ุญุฏ ูุนููู ููุชูุณูู ุงูุตูุญู
    int offset = 0,
    bool forceRefresh = false, // ๐ก ุญูู ุฌุฏูุฏ
  }) async {
    final cacheKey = storeId; // ูุณุชุฎุฏู storeId ูููุชุงุญ ูููุงุด ุงูุฑุฆูุณู
    // ๐ก ูุญุงููุฉ ุฌูุจ ุงูููุชุฌุงุช ูู ุงููุงุด ุฅุฐุง ูู ุชูู ููุงู ููุชุฑุฉ ุจุงูุชุตููู ููู ูุทูุจ ุชุญุฏูุซุงู ุฅุฌุจุงุฑูุงู
    if (!forceRefresh &&
        (categoryId == null || categoryId.isEmpty) &&
        offset == 0) {
      final cachedProducts = await _cacheService.getProducts(cacheKey);
      if (cachedProducts != null && cachedProducts.isNotEmpty) {
        debugPrint('โ Products loaded from cache for store: $storeId');
        return cachedProducts;
      }
    }

    // -----------------------------------------------------------------
    // ๐ก ููุทู ุฌูุจ ุงูุจูุงูุงุช ูู Appwrite (ุชุญุฏูุซ ุจุณูุท)
    // -----------------------------------------------------------------

    try {
      final queries = <String>[
        Query.equal('storeId', storeId),
        // ๐ก ูุณุชุฎุฏู Limit:10000 ูุฌูุจ ุฌููุน ุงูููุชุฌุงุช ูู ุญุงู ููุง ูููู ุจุงูุชุฎุฒูู ุงููุคูุช ููุตูุญุฉ ุงูุฃููู/ุงููู
        // ูู ุญุงูุชูุง: ุณูุจูู ุนูู ุงูู Paging ูุถูุงู ุฌูุจ ุงูุจูุงูุงุช ุจุดูู ุตุญูุญ ูู StoreScreen
        Query.limit(limit),
        Query.offset(offset),
      ];

      // ุฅุถุงูุฉ ุดุฑุท ุงูุชุตููู ููุท ุฅุฐุง ุชู ุชูุฑูุฑู
      if (categoryId != null && categoryId.isNotEmpty) {
        queries.add(Query.equal('categoryId', categoryId));
      }

      // ๐ก ุฅุถุงูุฉ ุงูุชุฑุชูุจ ุงูุงูุชุฑุงุถู (ูุซูุงู ุญุณุจ ุงูุงุณู) ุฅุฐุง ูู ููู ููุงู ุชุฑุชูุจ ุขุฎุฑ
      queries.add(Query.orderAsc('name'));

      final response = await _databases.listDocuments(
        databaseId: 'mahllnadb',
        collectionId: 'Products',
        queries: queries,
      );

      final products = response.documents
          .map((doc) => Product.fromMap(doc.data))
          .toList();

      // ๐ก ุฅุฐุง ููุง ูู ุงูุตูุญุฉ ุงูุฃููู ููู ุชูู ููุงู ููุชุฑุฉ ุจุงูุชุตูููุ ูููู ุจุชุฎุฒูู ุงููุชุงุฆุฌ ูุคูุชุงู
      if (offset == 0 &&
          (categoryId == null || categoryId.isEmpty) &&
          products.isNotEmpty) {
        // ูุณุชุฎุฏู ProductService ูุฌูุจ ุฌููุน ุงูููุชุฌุงุช ูุบุฑุถ ุงูุชุฎุฒูู ุงููุคูุช
        // (ุฅุฐุง ูุงูุช ุงูู limit ุตุบูุฑุฉุ ูุญุชุงุฌ ุฅูู ุฌูุจ ูู ุดูุก ููุชุฎุฒูู ุงููุคูุช ุงููุงูู)
        // ุงูุญู ุงูุนููู: ุฅุฐุง ูุงูุช ุนุฏุฏ ุงูููุชุฌุงุช ูุณุงููุงู ููู limitุ ูุฌุจ ุงูุชุฑุงุถ ูุฌูุฏ ุตูุญุงุช ุฃุฎุฑูุ ูุฐุง ูุง ูุฎุฒู ูุคูุชุงู ุฅูุง ุฅุฐุง ุฌูุจูุง ูู ุดูุก.
        // ุงูุญู ุงูุฃุณูู ุงูุขู: ุชุฎุฒูู ุงูุตูุญุฉ ุงูุฃููู ููุทุ ูุน ุงูุนูู ุฃู ุงูุจุญุซ ูุงูุตูุญุงุช ุงูุฃุฎุฑู ุณุชุชุทูุจ ุงุณุชุฏุนุงุก API
        if (products.length < limit) {
          _cacheService.saveProducts(cacheKey, products);
          debugPrint('โ Products cached for store: $storeId');
        }
      }

      return products;
    } catch (e) {
      debugPrint('Error fetching products: $e');
      throw Exception('ูุดู ูู ุชุญููู ุงูููุชุฌุงุช');
    }
  }
}
